<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from sparkpost/xml/schema/CRM/Sparkpost/MailingEventSparkpost.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:79a61839da1bd4711b4fcc4659449719)
 */
use CRM_Sparkpost_ExtensionUtil as E;

/**
 * Database access object for the MailingEventSparkpost entity.
 */
class CRM_Sparkpost_DAO_MailingEventSparkpost extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_mailing_event_sparkpost';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = FALSE;

  /**
   * Unique MailingEventSparkpost ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * FK to EventQueue
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $event_queue_id;

  /**
   * FK to Contact
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $contact_id;

  /**
   * FK to Activity
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $activity_id;

  /**
   * External Sparkpost Event ID
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $sparkpost_event_id;

  /**
   * Subject line from the email header.
   *
   * @var string|null
   *   (SQL type: varchar(128))
   *   Note that values will be retrieved from the database as a string.
   */
  public $subject;

  /**
   * Sparkpost bounce class
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $bounce_class;

  /**
   * Error code by which the remote server described a failed delivery attempt.
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $error_code;

  /**
   * Sparkpost number of retries
   *
   * @var int|string|null
   *   (SQL type: int unsigned)
   *   Note that values will be retrieved from the database as a string.
   */
  public $num_retries;

  /**
   * Friendly sender or 'From' header in the original email.
   *
   * @var string|null
   *   (SQL type: varchar(254))
   *   Note that values will be retrieved from the database as a string.
   */
  public $friendly_from;

  /**
   * Lowercase version of recipient address used on this message's SMTP envelope.
   *
   * @var string|null
   *   (SQL type: varchar(254))
   *   Note that values will be retrieved from the database as a string.
   */
  public $rcpt_to;

  /**
   * Unmodified, exact response returned by the remote server due to a failed delivery attempt
   *
   * @var string|null
   *   (SQL type: varchar(254))
   *   Note that values will be retrieved from the database as a string.
   */
  public $raw_reason;

  /**
   * Canonicalized text of the response returned by the remote server due to a failed delivery attempt.
   *
   * @var string|null
   *   (SQL type: varchar(254))
   *   Note that values will be retrieved from the database as a string.
   */
  public $reason;

  /**
   * Indicates if the transmission was marked as transactional.
   *
   * @var bool|string|null
   *   (SQL type: tinyint)
   *   Note that values will be retrieved from the database as a string.
   */
  public $transactional;

  /**
   * Time at which this message was injected into SparkPost.
   *
   * @var string|null
   *   (SQL type: datetime)
   *   Note that values will be retrieved from the database as a string.
   */
  public $injection_time;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_mailing_event_sparkpost';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Mailing Event Sparkposts') : E::ts('Mailing Event Sparkpost');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique MailingEventSparkpost ID'),
          'required' => TRUE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.id',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'event_queue_id' => [
          'name' => 'event_queue_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Event Queue ID'),
          'description' => E::ts('FK to EventQueue'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.event_queue_id',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'FKClassName' => 'CRM_Mailing_Event_DAO_MailingEventQueue',
          'html' => [
            'label' => E::ts("Recipient"),
          ],
          'add' => NULL,
        ],
        'contact_id' => [
          'name' => 'contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Contact ID'),
          'description' => E::ts('FK to Contact'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.contact_id',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'html' => [
            'label' => E::ts("Contact"),
          ],
          'add' => NULL,
        ],
        'activity_id' => [
          'name' => 'activity_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Activity ID'),
          'description' => E::ts('FK to Activity'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.activity_id',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'FKClassName' => 'CRM_Activity_DAO_Activity',
          'html' => [
            'label' => E::ts("Activity"),
          ],
          'add' => NULL,
        ],
        'sparkpost_event_id' => [
          'name' => 'sparkpost_event_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Sparkpost Event ID'),
          'description' => E::ts('External Sparkpost Event ID'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.sparkpost_event_id',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'add' => NULL,
        ],
        'subject' => [
          'name' => 'subject',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Subject'),
          'description' => E::ts('Subject line from the email header.'),
          'maxlength' => 128,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.subject',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'bounce_class' => [
          'name' => 'bounce_class',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Bounce Class'),
          'description' => E::ts('Sparkpost bounce class'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.bounce_class',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'add' => NULL,
        ],
        'error_code' => [
          'name' => 'error_code',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Error Code'),
          'description' => E::ts('Error code by which the remote server described a failed delivery attempt.'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.error_code',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'add' => NULL,
        ],
        'num_retries' => [
          'name' => 'num_retries',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Num Retries'),
          'description' => E::ts('Sparkpost number of retries'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.num_retries',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'add' => NULL,
        ],
        'friendly_from' => [
          'name' => 'friendly_from',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Friendly From'),
          'description' => E::ts('Friendly sender or \'From\' header in the original email.'),
          'maxlength' => 254,
          'size' => 30,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.friendly_from',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'html' => [
            'type' => 'Email',
          ],
          'add' => NULL,
        ],
        'rcpt_to' => [
          'name' => 'rcpt_to',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Rcpt To'),
          'description' => E::ts('Lowercase version of recipient address used on this message\'s SMTP envelope.'),
          'maxlength' => 254,
          'size' => 30,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.rcpt_to',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'html' => [
            'type' => 'Email',
          ],
          'add' => NULL,
        ],
        'raw_reason' => [
          'name' => 'raw_reason',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Raw Reason'),
          'description' => E::ts('Unmodified, exact response returned by the remote server due to a failed delivery attempt'),
          'maxlength' => 254,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.raw_reason',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'reason' => [
          'name' => 'reason',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Reason'),
          'description' => E::ts('Canonicalized text of the response returned by the remote server due to a failed delivery attempt.'),
          'maxlength' => 254,
          'size' => CRM_Utils_Type::HUGE,
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.reason',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'transactional' => [
          'name' => 'transactional',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => E::ts('Transactional'),
          'description' => E::ts('Indicates if the transmission was marked as transactional.'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.transactional',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'add' => NULL,
        ],
        'injection_time' => [
          'name' => 'injection_time',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Injection Time'),
          'description' => E::ts('Time at which this message was injected into SparkPost.'),
          'usage' => [
            'import' => FALSE,
            'export' => FALSE,
            'duplicate_matching' => FALSE,
            'token' => FALSE,
          ],
          'where' => 'civicrm_mailing_event_sparkpost.injection_time',
          'table_name' => 'civicrm_mailing_event_sparkpost',
          'entity' => 'MailingEventSparkpost',
          'bao' => 'CRM_Sparkpost_DAO_MailingEventSparkpost',
          'localizable' => 0,
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'mailing_event_sparkpost', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'mailing_event_sparkpost', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
